{"version":3,"sources":["hclj/midi.cljs"],"mappings":";;AAmBA,AAAKA,oBAAQ,6CAAA,2CAAA,2DAAA,IAAA,2DAAA,IAAA,4DAAA,IAAA,2DAAA,jVAACC;AAId,AAAKC,oBAAQ,6CAAA,2CAAA,IAAA,5FAACD;AAAD,AAAU,mBAAA,ZAACE;GAAX,IAAA;AAAA,AACU,mBAAA,ZAACA;GADX,IAAA,MAAA,IAAA,MAAA,IAAA,MAAA,IAAA,MAAA,IAAA,MAAA,IAAA;AASb,uBAAA,vBAAMC,sDAAYC,IAAIC;AAAtB,AACE,OAACC,mDAAML,kBAAQM,gBAAMH,IAAIC;;AAE3B,0BAAA,1BAAMG;AAAN,AACE,+CAAA,xCAACC,sBAAOR;;AACV,AAACO;AACD,oBAAA,pBAAMG,gDAASC;AAAf,AAAA,OAAAF,gBACGE;;AAGH,oBAAA,pBAAMC,gDAASC;AAAf,AACE,OAAA,AAAIA;;AACN,yBAAA,zBAAMC,0DAAcD;AAApB,AACE,OAAA,AAAIA;;AACN,0BAAA,1BAAME,4DAAeZ,IAAIU;AAAzB,AACE,OAACR,mDAAMP,kBAAQQ,gBAAMH,IAAI,AAASU;;AA0BpC,uBAAA,vBAAMG;AAAN,AACE,OACCC,+CACA;AAAA,AAGE,AAAChB,YAAe,AAAUgB;;AAC1B,IAAMC,cAAY,uDAAA,vDAAiBD;AAAnC,AAEE,wBAAA,gBAAA,xCAAcC,8CACA,WAAKL;AAAL,AAEE,GAAM,6CAAA,7CAACM,iDAAI,AAACP,kBAAQC;AACR,+BAAA,xBAACE,mFAAuBF;;AADpC,GAEY,6CAAA,7CAACM,iDAAI,AAACP,kBAAQC;AACd,+BAAA,xBAACE,mFAAuBF;;AAHpC,GAIY,6CAAA,7CAACM,iDAAI,AAACP,kBAAQC;AACd,+BAAA,xBAACE,oFAAuBF;;AALpC,GAMY,6CAAA,7CAACM,iDAAI,AAACP,kBAAQC;AACd,+BAAA,xBAACE,mFAAuBF;;AAPpC;;;;;;;AAQhB,+BAAA,SAAA,jCAAcK,uCACA,WAAKL;AAAL,AAEE,IAAMO,MAAI,AAACN,uBAAaD;IAClBQ,IAAE,4CAAA,AAAAZ,5CAACa,4DAAKtB,mBAAQoB;AADtB,AAEE,oBAAIC;AAAE,QAACA,kCAAAA,oCAAAA;;AAAP;;;;;AAIzB,cAAA,dAAME,oCAAGpB,IAAIqB,IAAIC;AAAjB,AACE,OAACC,iBAAM,iBAAAC,WAAA,AAAAlB,gBAAMX;AAAN,AAAA,8EAAA6B,0BAAAA,hGAACxB,oCAAAA,8CAAAA;KAAcqB,IAAIC","names":["hclj.midi/sliders","cljs.core.atom","hclj.midi/buttons","js/console.log","hclj.midi/set-button","key","f","cljs.core.swap_BANG_","cljs.core/assoc","hclj.midi/clear-buttons","cljs.core/reset!","cljs.core/deref","hclj.midi/get-val","atom","hclj.midi/get-num","e","hclj.midi/get-note-num","hclj.midi/update-slider","hclj.midi/start-midi","js/module$node_modules$webmidi$webmidi_min","quneo-input","cljs.core._EQ_","num","b","cljs.core.get","hclj.midi/s","min","max","hclj.maths/scale","G__32550"],"sourcesContent":["(ns hclj.midi\n  (:require [\"webmidi\" :as web-midi]\n            [hclj.maths :refer [scale]]))\n\n;; Lists all noteon messages\n;; e.note.number will give you the note number for switching based on noteon message.\n;; (.addListener quneo-input \"noteon\" \"all\"\n;;               (fn [e] (js/console.log e)))\n\n;; Lists all controlchange messages (really rinses the console as quneo puts out one for pressure as well as location which is probably the one I actually want.)\n;; e.controller.number and e.value are the properties I want\n;; filter based on number, update based on value\n\n;; Some of the pads have the same cc for pressure as the sliders do for location so may need to filter based on another criteria as well or set up a preset in the software.\n;; Need to create a custom preset in the quneo software that disables pressure for grid mode pads\n\n;; (.addListener quneo-input \"controlchange\" \"all\"\n;;               (fn [e] (js/console.log e)))\n\n(def sliders (atom {:slider1 0\n                    :slider2 0\n                    :slider3 0\n                    :slider4 0}))\n(def buttons (atom {0 #(js/console.log 1)\n                    1 #(js/console.log 2)\n                    2 false\n                    3 false\n                    4 false\n                    5 false\n                    6 false\n                    7 false\n                    }))\n(defn set-button [key f]\n  (swap! buttons assoc key f ))\n\n(defn clear-buttons []\n  (reset! buttons {}))\n(clear-buttons)\n(defn get-val [atom]\n  @atom)\n\n;; web midi setup\n(defn get-num [e]\n  (.. e -controller -number))\n(defn get-note-num [e]\n  (.. e -note -number))\n(defn update-slider [key e]\n  (swap! sliders assoc key (.-value e)))\n\n\n;; (defn start-midi []\n;;   (.enable\n;;    web-midi\n;;    (fn []\n;;      ;; Different OS's use different names for these midi devices\n\n;;      (let [midi-input (.getInputByName web-midi \"AudioSwift 3\")]\n;;        ;; cc listeners\n;;        (js/console.log (.-inputs web-midi))\n;;        (.addListener midi-input \"controlchange\" \"all\"\n;;                      (fn [e]\n;;                        (let [s-num (get-num e)]\n\n;;                          (js/console.log s-num)\n;;                          (cond (= 1 s-num)\n;;                                (update-slider :slider1 e)\n;;                                (= 2 s-num)\n;;                                (update-slider :slider2 e)\n;;                                (= 3 s-num)\n;;                                (update-slider :slider3 e)\n;;                                (= 4 s-num)\n;;                                (update-slider :slider4 e)))))\n;;        ))))\n(defn start-midi []\n  (.enable\n   web-midi\n   (fn []\n     ;; Different OS's use different names for these midi devices\n\n     (js/console.log (.-inputs web-midi))\n     (let [quneo-input (.getInputByName web-midi \"QUNEO\")]\n       ;; cc listeners\n       (.addListener quneo-input \"controlchange\" \"all\"\n                     (fn [e]\n                       ;; (js/console.log \"CC!!\")\n                       (cond (= 6 (get-num e))\n                                   (update-slider :slider1 e)\n                                   (= 7 (get-num e))\n                                   (update-slider :slider2 e)\n                                   (= 8 (get-num e))\n                                   (update-slider :slider3 e)\n                                   (= 9 (get-num e))\n                                   (update-slider :slider4 e))))\n       (.addListener quneo-input \"noteon\" \"all\"\n                     (fn [e]\n                       ;; (js/console.log \"button press\")\n                       (let [num (get-note-num e)\n                             b (get @buttons num)]\n                         (if b (b))\n                         )))\n       ))))\n\n(defn s [key min max]\n  (scale (key @sliders) min max))\n"]}